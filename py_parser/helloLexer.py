# Generated from C:/Users/14908/Desktop/PPCA/Compiler\hello.g4 by ANTLR 4.13.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,58,359,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,5,
        1,6,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,9,1,10,1,10,1,10,1,11,1,11,
        1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,15,1,16,1,16,
        1,16,1,17,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,21,
        1,22,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,
        1,28,1,28,1,29,1,29,1,30,1,30,1,30,1,30,5,30,197,8,30,10,30,12,30,
        200,9,30,1,30,1,30,1,31,1,31,1,31,1,31,5,31,208,8,31,10,31,12,31,
        211,9,31,1,31,1,31,1,31,1,31,1,31,1,32,1,32,1,32,5,32,221,8,32,10,
        32,12,32,224,9,32,3,32,226,8,32,1,33,1,33,1,33,1,33,1,33,1,34,1,
        34,1,34,1,34,1,35,1,35,1,35,1,35,1,35,1,36,1,36,1,36,1,36,1,36,1,
        36,1,36,1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,
        39,1,40,1,40,1,40,1,40,1,40,1,40,1,41,1,41,1,41,1,41,1,41,1,42,1,
        42,1,42,1,42,1,42,1,42,1,43,1,43,1,43,1,43,1,43,1,44,1,44,1,44,1,
        44,1,44,1,45,1,45,1,45,1,45,1,46,1,46,1,46,1,46,1,46,1,46,1,47,1,
        47,1,47,1,47,1,47,1,47,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,
        48,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,50,1,50,1,51,1,51,1,52,1,
        52,1,53,1,53,1,54,1,54,1,55,1,55,5,55,332,8,55,10,55,12,55,335,9,
        55,1,56,1,56,1,57,1,57,1,57,3,57,342,8,57,1,58,1,58,5,58,346,8,58,
        10,58,12,58,349,9,58,1,58,1,58,1,59,4,59,354,8,59,11,59,12,59,355,
        1,59,1,59,1,209,0,60,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,
        10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,
        21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,
        32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,
        43,87,44,89,45,91,46,93,47,95,48,97,49,99,50,101,51,103,52,105,53,
        107,54,109,55,111,56,113,0,115,0,117,57,119,58,1,0,8,2,0,10,10,13,
        13,1,0,49,57,1,0,48,57,2,0,65,90,97,122,4,0,48,57,65,90,95,95,97,
        122,3,0,34,34,92,92,110,110,4,0,10,10,13,13,34,34,92,92,3,0,9,10,
        13,13,32,32,364,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,
        0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,
        0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,
        0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,
        0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,
        0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,
        0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,
        0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,
        0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,
        0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,
        0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,
        0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,117,1,0,0,0,0,119,1,0,0,0,1,121,
        1,0,0,0,3,123,1,0,0,0,5,125,1,0,0,0,7,127,1,0,0,0,9,129,1,0,0,0,
        11,131,1,0,0,0,13,134,1,0,0,0,15,137,1,0,0,0,17,139,1,0,0,0,19,141,
        1,0,0,0,21,144,1,0,0,0,23,147,1,0,0,0,25,150,1,0,0,0,27,152,1,0,
        0,0,29,154,1,0,0,0,31,157,1,0,0,0,33,160,1,0,0,0,35,163,1,0,0,0,
        37,166,1,0,0,0,39,168,1,0,0,0,41,170,1,0,0,0,43,172,1,0,0,0,45,175,
        1,0,0,0,47,178,1,0,0,0,49,180,1,0,0,0,51,182,1,0,0,0,53,184,1,0,
        0,0,55,186,1,0,0,0,57,188,1,0,0,0,59,190,1,0,0,0,61,192,1,0,0,0,
        63,203,1,0,0,0,65,225,1,0,0,0,67,227,1,0,0,0,69,232,1,0,0,0,71,236,
        1,0,0,0,73,241,1,0,0,0,75,248,1,0,0,0,77,251,1,0,0,0,79,256,1,0,
        0,0,81,260,1,0,0,0,83,266,1,0,0,0,85,271,1,0,0,0,87,277,1,0,0,0,
        89,282,1,0,0,0,91,287,1,0,0,0,93,291,1,0,0,0,95,297,1,0,0,0,97,303,
        1,0,0,0,99,312,1,0,0,0,101,319,1,0,0,0,103,321,1,0,0,0,105,323,1,
        0,0,0,107,325,1,0,0,0,109,327,1,0,0,0,111,329,1,0,0,0,113,336,1,
        0,0,0,115,341,1,0,0,0,117,343,1,0,0,0,119,353,1,0,0,0,121,122,5,
        44,0,0,122,2,1,0,0,0,123,124,5,59,0,0,124,4,1,0,0,0,125,126,5,91,
        0,0,126,6,1,0,0,0,127,128,5,93,0,0,128,8,1,0,0,0,129,130,5,61,0,
        0,130,10,1,0,0,0,131,132,5,43,0,0,132,133,5,43,0,0,133,12,1,0,0,
        0,134,135,5,45,0,0,135,136,5,45,0,0,136,14,1,0,0,0,137,138,5,33,
        0,0,138,16,1,0,0,0,139,140,5,126,0,0,140,18,1,0,0,0,141,142,5,42,
        0,0,142,143,5,42,0,0,143,20,1,0,0,0,144,145,5,60,0,0,145,146,5,60,
        0,0,146,22,1,0,0,0,147,148,5,62,0,0,148,149,5,62,0,0,149,24,1,0,
        0,0,150,151,5,60,0,0,151,26,1,0,0,0,152,153,5,62,0,0,153,28,1,0,
        0,0,154,155,5,60,0,0,155,156,5,61,0,0,156,30,1,0,0,0,157,158,5,62,
        0,0,158,159,5,61,0,0,159,32,1,0,0,0,160,161,5,61,0,0,161,162,5,61,
        0,0,162,34,1,0,0,0,163,164,5,33,0,0,164,165,5,61,0,0,165,36,1,0,
        0,0,166,167,5,38,0,0,167,38,1,0,0,0,168,169,5,94,0,0,169,40,1,0,
        0,0,170,171,5,124,0,0,171,42,1,0,0,0,172,173,5,38,0,0,173,174,5,
        38,0,0,174,44,1,0,0,0,175,176,5,124,0,0,176,177,5,124,0,0,177,46,
        1,0,0,0,178,179,5,63,0,0,179,48,1,0,0,0,180,181,5,58,0,0,181,50,
        1,0,0,0,182,183,5,40,0,0,183,52,1,0,0,0,184,185,5,41,0,0,185,54,
        1,0,0,0,186,187,5,46,0,0,187,56,1,0,0,0,188,189,5,123,0,0,189,58,
        1,0,0,0,190,191,5,125,0,0,191,60,1,0,0,0,192,193,5,47,0,0,193,194,
        5,47,0,0,194,198,1,0,0,0,195,197,8,0,0,0,196,195,1,0,0,0,197,200,
        1,0,0,0,198,196,1,0,0,0,198,199,1,0,0,0,199,201,1,0,0,0,200,198,
        1,0,0,0,201,202,6,30,0,0,202,62,1,0,0,0,203,204,5,47,0,0,204,205,
        5,42,0,0,205,209,1,0,0,0,206,208,9,0,0,0,207,206,1,0,0,0,208,211,
        1,0,0,0,209,210,1,0,0,0,209,207,1,0,0,0,210,212,1,0,0,0,211,209,
        1,0,0,0,212,213,5,42,0,0,213,214,5,47,0,0,214,215,1,0,0,0,215,216,
        6,31,0,0,216,64,1,0,0,0,217,226,5,48,0,0,218,222,7,1,0,0,219,221,
        7,2,0,0,220,219,1,0,0,0,221,224,1,0,0,0,222,220,1,0,0,0,222,223,
        1,0,0,0,223,226,1,0,0,0,224,222,1,0,0,0,225,217,1,0,0,0,225,218,
        1,0,0,0,226,66,1,0,0,0,227,228,5,98,0,0,228,229,5,111,0,0,229,230,
        5,111,0,0,230,231,5,108,0,0,231,68,1,0,0,0,232,233,5,105,0,0,233,
        234,5,110,0,0,234,235,5,116,0,0,235,70,1,0,0,0,236,237,5,118,0,0,
        237,238,5,111,0,0,238,239,5,105,0,0,239,240,5,100,0,0,240,72,1,0,
        0,0,241,242,5,115,0,0,242,243,5,116,0,0,243,244,5,114,0,0,244,245,
        5,105,0,0,245,246,5,110,0,0,246,247,5,103,0,0,247,74,1,0,0,0,248,
        249,5,105,0,0,249,250,5,102,0,0,250,76,1,0,0,0,251,252,5,101,0,0,
        252,253,5,108,0,0,253,254,5,115,0,0,254,255,5,101,0,0,255,78,1,0,
        0,0,256,257,5,110,0,0,257,258,5,101,0,0,258,259,5,119,0,0,259,80,
        1,0,0,0,260,261,5,99,0,0,261,262,5,108,0,0,262,263,5,97,0,0,263,
        264,5,115,0,0,264,265,5,115,0,0,265,82,1,0,0,0,266,267,5,116,0,0,
        267,268,5,114,0,0,268,269,5,117,0,0,269,270,5,101,0,0,270,84,1,0,
        0,0,271,272,5,102,0,0,272,273,5,97,0,0,273,274,5,108,0,0,274,275,
        5,115,0,0,275,276,5,101,0,0,276,86,1,0,0,0,277,278,5,110,0,0,278,
        279,5,117,0,0,279,280,5,108,0,0,280,281,5,108,0,0,281,88,1,0,0,0,
        282,283,5,116,0,0,283,284,5,104,0,0,284,285,5,105,0,0,285,286,5,
        115,0,0,286,90,1,0,0,0,287,288,5,102,0,0,288,289,5,111,0,0,289,290,
        5,114,0,0,290,92,1,0,0,0,291,292,5,119,0,0,292,293,5,104,0,0,293,
        294,5,105,0,0,294,295,5,108,0,0,295,296,5,101,0,0,296,94,1,0,0,0,
        297,298,5,98,0,0,298,299,5,114,0,0,299,300,5,101,0,0,300,301,5,97,
        0,0,301,302,5,107,0,0,302,96,1,0,0,0,303,304,5,99,0,0,304,305,5,
        111,0,0,305,306,5,110,0,0,306,307,5,116,0,0,307,308,5,105,0,0,308,
        309,5,110,0,0,309,310,5,117,0,0,310,311,5,101,0,0,311,98,1,0,0,0,
        312,313,5,114,0,0,313,314,5,101,0,0,314,315,5,116,0,0,315,316,5,
        117,0,0,316,317,5,114,0,0,317,318,5,110,0,0,318,100,1,0,0,0,319,
        320,5,42,0,0,320,102,1,0,0,0,321,322,5,47,0,0,322,104,1,0,0,0,323,
        324,5,37,0,0,324,106,1,0,0,0,325,326,5,43,0,0,326,108,1,0,0,0,327,
        328,5,45,0,0,328,110,1,0,0,0,329,333,7,3,0,0,330,332,7,4,0,0,331,
        330,1,0,0,0,332,335,1,0,0,0,333,331,1,0,0,0,333,334,1,0,0,0,334,
        112,1,0,0,0,335,333,1,0,0,0,336,337,7,5,0,0,337,114,1,0,0,0,338,
        342,8,6,0,0,339,340,5,92,0,0,340,342,3,113,56,0,341,338,1,0,0,0,
        341,339,1,0,0,0,342,116,1,0,0,0,343,347,5,34,0,0,344,346,3,115,57,
        0,345,344,1,0,0,0,346,349,1,0,0,0,347,345,1,0,0,0,347,348,1,0,0,
        0,348,350,1,0,0,0,349,347,1,0,0,0,350,351,5,34,0,0,351,118,1,0,0,
        0,352,354,7,7,0,0,353,352,1,0,0,0,354,355,1,0,0,0,355,353,1,0,0,
        0,355,356,1,0,0,0,356,357,1,0,0,0,357,358,6,59,0,0,358,120,1,0,0,
        0,9,0,198,209,222,225,333,341,347,355,1,0,1,0
    ]

class helloLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    LineComment = 31
    BlockComment = 32
    Interger = 33
    BOOL = 34
    INT = 35
    VOID = 36
    STRING = 37
    IF = 38
    ELSE = 39
    NEW = 40
    CLASS = 41
    TRUE = 42
    FALSE = 43
    NULL = 44
    THIS = 45
    FOR = 46
    WHILE = 47
    BREAK = 48
    CONTI = 49
    RET = 50
    MUL = 51
    DIV = 52
    MOD = 53
    ADD = 54
    SUB = 55
    Identifier = 56
    String = 57
    WS = 58

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "','", "';'", "'['", "']'", "'='", "'++'", "'--'", "'!'", "'~'", 
            "'**'", "'<<'", "'>>'", "'<'", "'>'", "'<='", "'>='", "'=='", 
            "'!='", "'&'", "'^'", "'|'", "'&&'", "'||'", "'?'", "':'", "'('", 
            "')'", "'.'", "'{'", "'}'", "'bool'", "'int'", "'void'", "'string'", 
            "'if'", "'else'", "'new'", "'class'", "'true'", "'false'", "'null'", 
            "'this'", "'for'", "'while'", "'break'", "'continue'", "'return'", 
            "'*'", "'/'", "'%'", "'+'", "'-'" ]

    symbolicNames = [ "<INVALID>",
            "LineComment", "BlockComment", "Interger", "BOOL", "INT", "VOID", 
            "STRING", "IF", "ELSE", "NEW", "CLASS", "TRUE", "FALSE", "NULL", 
            "THIS", "FOR", "WHILE", "BREAK", "CONTI", "RET", "MUL", "DIV", 
            "MOD", "ADD", "SUB", "Identifier", "String", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "LineComment", "BlockComment", 
                  "Interger", "BOOL", "INT", "VOID", "STRING", "IF", "ELSE", 
                  "NEW", "CLASS", "TRUE", "FALSE", "NULL", "THIS", "FOR", 
                  "WHILE", "BREAK", "CONTI", "RET", "MUL", "DIV", "MOD", 
                  "ADD", "SUB", "Identifier", "Escapecharacter", "Stringchar", 
                  "String", "WS" ]

    grammarFileName = "hello.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


